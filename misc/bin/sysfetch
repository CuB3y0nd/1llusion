#!/bin/sh

# color escapes
CBK=$(tput setaf 0)
CRE=$(tput setaf 1)
CGR=$(tput setaf 2)
CYE=$(tput setaf 3)
CBL=$(tput setaf 4)

CMA=$(tput setaf 5)
CCY=$(tput setaf 6)
CWH=$(tput setaf 7)
CBD=$(tput bold)
CNC=$(tput sgr0)

#█▓▒░ progress bar
draw() {
  FULL=━
  EMPTY=━
  out=
  perc=$1
  size=$2
  inc=$((perc * size / 100))
  color=34
  color2=31
  for v in $(seq 0 $((size - 1))); do
    [ "$v" -le "$inc" ] && out="${out}${CMA}${FULL}" || out="${out}${CWH}${EMPTY}"
  done
  printf "%b" "$out"
}

#█▓▒░ populate vals
i=1
c=$(printf "\033[0m\033[31m░▒")
while [ "$i" -le 6 ]; do
  c=${c}$(printf "\033[%dm\033[%dm█▓▒░" "$((i + 41))" "$((i + 30))")
  i=$((i + 1))
done
COLORBAR=${c}$(printf "\033[37m█\033[0m▒░")

name=$USER
host=$(uname -n)
distro=$(uname -o | awk -F '"' '/PRETTY_NAME/ { print $2 }' /etc/os-release)
packages=$(pacman -Q | wc -l)
wm=$(xprop -id "$(xprop -root -notype | awk '$1=="_NET_SUPPORTING_WM_CHECK:"{print $5}')" -notype -f _NET_WM_NAME 8t | grep "WM_NAME" | cut -f2 -d \")
storage=$(df -h --output=used / | awk 'NR == 2 { print $1 }')
term=$(ps -o sid= -p "$$" | xargs ps -o ppid= -p | xargs ps -o comm= -p)
uptm=$(uptime -p | sed -e 's/hour/hr/' -e 's/hours/hrs/' -e 's/minutes/mins/' -e 's/minute/min/' -e 's/up //')

c_lvl=$(printf "%.0f" "$(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}')")
CPU=$(printf "%-4s\033m%-5s%-25s \n" "${CGR}cpu${CNC} " "$c_lvl%" "$(draw "$c_lvl" 14)")
ram_lvl=$(free | awk '/Mem:/ {print int($3/$2 * 100.0)}')
RAM=$(printf "%-4s\033m%-5s%-25s \n" "${CYE}ram${CNC} " "$ram_lvl%" "$(draw "$ram_lvl" 14)")
disk_lvl=$(df -h | grep '/$' | tr -s ' ' | cut -d ' ' -f5 | sed 's/%//')
DISK=$(printf "%-4s\033m%-5s%-25s \n" "${CCY}disk${CNC} " "$disk_lvl%" "$(draw "$disk_lvl" 14)")

#Cleanup first
clear

# Ascii art arms
cat <<EOF
$CBD                  $CBL.
                 $CBL/ $CMA\\
                $CBL/   $CMA\\
               $CBL/^.   $CMA\\
              $CBL/  .$CWH-$CMA.  \\
             $CBL/  (   $CMA) _\\
            $CBL/ _.~   $CMA~._^\\
           $CBL/.^         $CMA^.\\
EOF

printf "\033[0m\n    %s\033[0m\n\n" "$COLORBAR"

# greetings
printf "%s\n" "             Hi $CRE$CBD$name$CNC"
printf "%s\n" "       Welcome to $CGR$CBD$host$CNC"
printf "%s\n\n" "           up $CCY$CBD$uptm$CNC"

# environment
printf "%s\n" "$CRE         distro $CWH⏹ $CNC$distro"
printf "%s\n" "$CBL         kernel $CWH⏹ $CNC$(uname -r)"
printf "%s\n" "$CMA       packages $CWH⏹ $CNC${packages}"
printf "%s\n" "$CGR          shell $CWH⏹ $CNC${SHELL##*/}"
printf "%s\n" "$CYE           term $CWH⏹ $CNC${term}"
printf "%s\n" "$CCY             wm $CWH⏹ $CNC${wm}"
printf "%s\n" "$CBL           disk $CWH⏹ $CNC${storage} used"
printf " %s\n" "$CNC"

printf "        %s\n        %s\n       %s\033[0m\n" "$CPU" "$RAM" "$DISK"

# hide the cursor and wait for user return input
tput civis

old_stty_cfg=$(stty -g)
stty -icanon min 1 time 0
IFS= read -r char
stty "$old_stty_cfg"

# give the cursor back
tput cnorm
