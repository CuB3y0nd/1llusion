#!/usr/bin/env bash

CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)

backup_folder=~/.backup
date=$(date +%Y%m%d-%H%M%S)

logo() {
	local text="${1:?}"
	printf '%s [%s%s %s%s %s]%s\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}

if [ "$(id -u)" = 0 ]; then
	echo "This script cannot be run as root user!"
	exit 1
fi

# Welcome

logo "Welcome!"
printf '%s%sThis script will check if you have the necessary dependencies,
and if not, it will install them. Then, it will clone the RICE
into your HOME directory.\n
After that, it will create a secure backup of your files,
and then copy the new files to your computer.\n
My dotfiles DO NOT modify any of your system configurations.\n
You will be prompted for your root password to install missing
dependencies and/or to switch to zsh shell, if its not your default.\n
This script doesnt have the potential power to break your system,
it only copies files from my repository to your HOME directory.%s\n\n' "${BLD}" "${CRE}" "${CNC}"

while true; do
	read -rp " Do you want to continue? [y/N]: " yn
	case $yn in
	[Yy]*) break ;;
	[Nn]*) exit ;;
	*) printf " Error: Please enter 'y' or 'n'\n\n" ;;
	esac
done
clear

# Install packages

logo "Install needed packages"

dependencias=(base-devel rustup pacman-contrib bspwm polybar sxhkd
	alacritty brightnessctl dunst rofi lsd
	jq polkit-gnome git playerctl mpd python-pip python-pynvim nodejs npm
	ncmpcpp ranger mpc picom xdotool
	feh ueberzug maim pamixer libwebp xdg-user-dirs
	webp-pixbuf-loader xorg-xprop xorg-xkill physlock papirus-icon-theme
	ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-terminus-nerd ttf-inconsolata ttf-joypixels
	zsh zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting xorg-xsetroot xorg-xwininfo xorg-xrandr)

is_installed() {
	pacman -Qi "$1" &>/dev/null
	return $?
}

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for paquete in "${dependencias[@]}"; do
	if ! is_installed "$paquete"; then
		sudo pacman -S "$paquete" --noconfirm
		printf "\n"
	else
		printf '%s%s is already installed!%s\n' "${CGR}" "$paquete" "${CNC}"
		sleep 1
	fi
done
sudo npm install -g neovim
sleep 3
clear

# Prepar Folders

logo "Prepar Folders"
if [ ! -e $HOME/.config/user-dirs.dirs ]; then
	xdg-user-dirs-update
	echo "Creating xdg-user-dirs..."
else
	echo "user-dirs.dirs is already exists!"
fi
sleep 2
clear

# Clone the Rice

logo "Download dotfiles"
[ -d ~/1llusion ] && rm -rf ~/1llusion
printf "Cloning rice from https://github.com/CuB3y0nd/1llusion...\n"
cd
git clone --depth=1 https://github.com/CuB3y0nd/1llusion.git
sleep 2
clear

# Backup files

logo "Backup files"
printf "Backup files will be stored in %s%s%s/.backup%s \n\n" "${BLD}" "${CRE}" "$HOME" "${CNC}"
sleep 10

if [ ! -d "$backup_folder" ]; then
	mkdir -p "$backup_folder"
fi

for folder in bspwm alacritty picom rofi eww sxhkd dunst polybar ncmpcpp nvim ranger zsh mpd yay; do
	if [ -d "$HOME/.config/$folder" ]; then
		mv "$HOME/.config/$folder" "$backup_folder/${folder}_$date"
		echo "$folder folder backed up successfully at $backup_folder/${folder}_$date"
	else
		echo "The folder $folder does not exist in $HOME/.config/"
	fi
done

for folder in chrome; do
	if [ -d "$HOME"/.mozilla/firefox/*.default-release/$folder ]; then
		mv "$HOME"/.mozilla/firefox/*.default-release/$folder "$backup_folder"/${folder}_$date
		echo "$folder folder backed up successfully at $backup_folder/${folder}_$date"
	else
		echo "The folder $folder does not exist in $HOME/.mozilla/firefox/"
	fi
done

for file in user.js; do
	if [ -e "$HOME"/.mozilla/firefox/*.default-release/$file ]; then
		mv "$HOME"/.mozilla/firefox/*.default-release/$file "$backup_folder"/${file}_$date
		echo "$file file backed up successfully at $backup_folder/${file}_$date"
	else
		echo "The file $file does not exist in $HOME/.mozilla/firefox/"
	fi
done

[ -f ~/.zshrc ] && mv ~/.zshrc ~/.backup/.zshrc-backup-"$(date +%Y.%m.%d-%H.%M.%S)"

printf "%s%sDone.%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 5

# Copy the Rice

logo "Import dotfiles"
printf "Copying files to respective directories...\n"

[ ! -d ~/.config ] && mkdir -p ~/.config
[ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
[ ! -d ~/.local/share/applications ] && mkdir -p ~/.local/share/applications
[ ! -d ~/.local/share/fonts ] && mkdir -p ~/.local/share/fonts
[ ! -d ~/.local/share/asciiart ] && mkdir -p ~/.local/share/asciiart

cd 1llusion
for rices in ~/1llusion/config/bspwm/rices/*; do
	cp -R walls "${rices}"
	if [ $? -eq 0 ]; then
		printf "%s%s%s folder copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
		sleep 1
	else
		printf "%s%s%s failed to been copied, you must copy it manually!%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done
cd

for archivos in ~/1llusion/config/*; do
	cp -R "${archivos}" ~/.config/
	if [ $? -eq 0 ]; then
		printf "%s%s%s folder copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
		sleep 1
	else
		printf "%s%s%s failed to been copied, you must copy it manually!%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done

for archivos in ~/1llusion/misc/bin/*; do
	cp -R "${archivos}" ~/.local/bin/
	if [ $? -eq 0 ]; then
		printf "%s%s%s file copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
		sleep 1
	else
		printf "%s%s%s failed to been copied, you must copy it manually!%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done

for archivos in ~/1llusion/misc/applications/*; do
	cp -R "${archivos}" ~/.local/share/applications/
	if [ $? -eq 0 ]; then
		printf "%s%s%s file copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
		sleep 1
	else
		printf "%s%s%s failed to been copied, you must copy it manually!%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done

for archivos in ~/1llusion/misc/fonts/*; do
	cp -R "${archivos}" ~/.local/share/fonts/
	if [ $? -eq 0 ]; then
		printf "%s%s%s copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
		sleep 1
	else
		printf "%s%s%s failed to been copied, you must copy it manually!%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done

for archivos in ~/1llusion/misc/asciiart/*; do
	cp -R "${archivos}" ~/.local/share/asciiart/
	if [ $? -eq 0 ]; then
		printf "%s%s%s file copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
		sleep 1
	else
		printf "%s%s%s failed to been copied, you must copy it manually!%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done

for archivos in ~/1llusion/misc/firefox/*; do
	cp -R "${archivos}" ~/.mozilla/firefox/*.default-release/
	if [ $? -eq 0 ]; then
		printf "%s%s%s folder copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
		sleep 1
	else
		printf "%s%s%s failed to been copied, you must copy it manually!%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done

cp -f "$HOME"/1llusion/home/.zshrc "$HOME"
fc-cache -rv >/dev/null 2>&1
printf "%s%sFiles copied succesfully!%s\n" "${BLD}" "${CGR}" "${CNC}"

# Zsh plugins

mkdir -p ~/.zsh/plugins/
git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.zsh/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.zsh/plugins/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-history-substring-search.git ~/.zsh/plugins/zsh-history-substring-search
printf "%s%sZsh plugins install succesfully!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 3

# Install yay & eww

logo "Install yay & eww"

if ! command -v yay >/dev/null 2>&1; then
	printf "%s%sInstalling yay...%s\n" "${BLD}" "${CBL}" "${CNC}"
	cd
	git clone https://aur.archlinux.org/yay-bin.git
	cd yay-bin
	makepkg -si --noconfirm
	cd
	yay -Y --gendb
	yay -Y --devel --save
	yay -Syu --devel
else
	printf "\n%s%syay is already installed!%s\n" "${BLD}" "${CGR}" "${CNC}"
fi

if ! command -v eww >/dev/null 2>&1; then
	printf "\n%s%sInstalling eww... This could take 10 mins or more!%s\n" "${BLD}" "${CBL}" "${CNC}"
	yay -S eww --noconfirm
	rm -rf {.cargo,.rustup}
	rm -rf $HOME/.cache/yay/eww
else
	printf "\n%s%seww is already installed!%s\n" "${BLD}" "${CGR}" "${CNC}"
fi

# Intall tdrop for scratchpads
if ! command -v tdrop >/dev/null 2>&1; then
	printf "\n%s%sInstalling tdrop...%s\n" "${BLD}" "${CBL}" "${CNC}"
	yay -S tdrop-git --noconfirm
else
	printf "\n%s%sTdrop is already installed!%s\n" "${BLD}" "${CGR}" "${CNC}"
fi

# Enable MPD service

logo "Enable MPD service"

systemctl --user enable mpd.service
systemctl --user start mpd.service
printf "%s%sDone.%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2

# Change the shell to zsh

logo "Change the default shell to zsh"
printf "%s%sIf your shell is not zsh, will be changed now.\n
Your root password is needed to make the change.\n\n
After that is important for you to reboot!\n %s\n" "${BLD}" "${CYE}" "${CNC}"
if [[ $SHELL != "/usr/bin/zsh" ]]; then
	echo "Changing shell to zsh... Your root password is needed:"
	chsh -s /usr/bin/zsh
else
	printf "%s%sYour shell is already change to zsh successfully!\n
Good bye! Installation finished, now reboot your computer and enjoy!%s\n" "${BLD}" "${CGR}" "${CNC}"
	zsh
fi
