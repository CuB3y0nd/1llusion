;; Modified   by https://github.com/gh0stzk/dotfiles

;; Workspaces
(deflisten workspaces "./scripts/WorkSpaces")

;; Volume vars
(defvar volum false)
(defpoll volume_icon :interval "1s" "scripts/Volume --icon")
(defpoll volume_value :interval "1s" "scripts/Volume --vol")

;; Network
(defpoll WIFIICON :interval "30s" `scripts/Network --icon`)
(defpoll NETSTAT :interval "30s" `scripts/Network --stat`)

;; Updates vars
(defpoll UPDATES :interval "2m" `Updates --get-updates`)
(defvar pac false)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Widget Section's							 ;;	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Launcher Widgets ;;
(defwidget launcher []
	(box :orientation "v" 
		 :space-evenly "false" 
		 :spacing -15
	(eventbox :cursor "pointer"
  	(button :class "launcher_icon" 
		   	:onclick "cd ; OpenApps --menu"
		   	:onrightclick "OpenApps --rice" "ó°£‡"))))

;; Workspaces Widgets ;;
(defwidget workspaces []
	(literal :content workspaces))


;; Wifi Widgets ;;
(defwidget wifi []
	(box		:orientation "v"  			
	(button		:style "background-image: url('${WIFIICON}');"
				:class "trayicon"
				:tooltip "${NETSTAT}")))


;; control center ;;
(defwidget notifycenter []
	(eventbox	:onhover "${EWW_CMD} update notify=true"	
				:onhoverlost "${EWW_CMD} update notify=false"
				:cursor "pointer"
	(box		:orientation "v"					
				:space-evenly "false" 	 
				:vexpand "false" 	
				
	(revealer	:transition "slideup"				
				:reveal notify			 
				:duration "550ms"
	(box		:orientation "v"					
				:space-evenly "false"
				
	(eventbox :cursor "pointer"			
	(button		:style "background-image: url('images/riceselector.png');"
				:class "trayicon" 									
				:tooltip "Change Rice!"		 
				:onclick "OpenApps --rice"))
	
	(eventbox :cursor "pointer"
	(button		:style "background-image: url('images/music_player.png');"
				:class "trayicon" 									
				:tooltip "Music Player"		 
				:onclick "OpenApps --player"))
				
	(eventbox :cursor "pointer"			
	(button		:style "background-image: url('images/usercard.png');"
				:class "trayicon" 									
				:tooltip "User Card"		 
				:onclick "OpenApps --usercard"))))

	(button		:style "background-image: url('images/widget_apps.png');"
				:class "trayicon" 									
				:tooltip "Widgets"))))

(defvar notify false)


;; Pacman Widgets ;;
(defwidget pacman []
	(eventbox	:onhover "${EWW_CMD} update pac=true"	
				:onhoverlost "${EWW_CMD} update pac=false" 
	(box		:orientation "v"					
				:space-evenly "false" 	 
				:vexpand "false" 	
				
	(revealer	:transition "slideup"				
				:reveal pac			 
				:duration "550ms"
	(box		:orientation "v"					
				:space-evenly "false"
				
	(label  	:class "bar-updates-text"
				:text "${UPDATES}")))
	
	(eventbox   :cursor "pointer"
	(button		:style "background-image: url('images/pac_man.png');"
				:class "trayicon"
				:onrightclick "OpenApps --checkupdates"
				:onclick "OpenApps --update")) )))


;; Volume Widgets ;;
(defwidget volum []
	(eventbox :onhover "${EWW_CMD} update volum=true" 		
			  :onhoverlost "${EWW_CMD} update volum=false"
			  :cursor "pointer"
	(box      :orientation "v" 	  
			  :space-evenly "false" 
			  :spacing "2"
	(revealer :transition "slideup" 
			  :reveal volum         
			  :duration "550ms"
	(scale    :class "volbar" 	  
			  :value volume_value
			  :onchange "pamixer --set-volume {}"
			  :orientation "v"      
			  :flipped true 
			  :tooltip "Volume: ${volume_value}%" 
			  :max 101 
			  :min 0))
	(button   :style "background-image: url('${volume_icon}');"
			  :class "trayicon"
			  :onrightclick "OpenApps --soundcontrol"
			  :onclick "scripts/volume --toggle-muted"))))

;; Clock Widgets ;;
(defwidget time []
	(box	:orientation "v" 
			:class "time" 
			:valign "end"
	(eventbox :cursor "pointer"
	(button	:onclick "OpenApps --calendar"
			:class "time-hour" "${formattime(EWW_TIME, "%H")}"))
	(eventbox :cursor "pointer"
	(button	:onclick "OpenApps --calendar"
			:class "time-min" "${formattime(EWW_TIME, "%M")}"))))


;; Powermenu Widgets ;;
(defwidget power []
	(eventbox	:onhover "${EWW_CMD} update power=true"	
				:onhoverlost "${EWW_CMD} update power=false"
				:cursor "pointer"
	(box		:orientation "v"					
				:space-evenly "false" 	 
				:vexpand "false" 	
				:class "powermenu"
	(revealer	:transition "slideup"				
				:reveal power			 
				:duration "550ms"
	(box		:orientation "v"
				:space-evenly "false"

	(button		:style "background-image: url('images/enpass.png');"
				:class "button-lock" 				
				:tooltip "Lock Screen"	 
				:onclick "physlock -d")
				
	(button   	:style "background-image: url('images/sys-sleep.png');"
				:class "button-bspres"  			
				:tooltip "Suspend computer" 
				:onclick "systemctl suspend")
				
	(button		:style "background-image: url('images/sys-reboot.png');"
				:class "button-reb"					
	  			:tooltip "Reboot"		 
				:onclick "reboot")
				
	(button		
				:style "background-image: url('images/sys-poweroff.png');"
				:class "button-off"					
				:tooltip "Shutdown"		 
				:onclick "shutdown now")))

	(button		
				:style "background-image: url('images/sys-powermenu.png');"
				:class "button-powermenu"					
				:tooltip "Power Menu"))))
(defvar power false)


;; Top Widgets ;;
(defwidget top []
	(box	:orientation "v" 
			:space-evenly "false" 
			:valign "start" 
(launcher)
(workspaces)))

;; Bottom Widgets ;;
(defwidget bottom []
	(box	:orientation "v" 
			:space-evenly "false"
(time)
(power)))

;; Control Panel Widgets ;;	
(defwidget control []
	(box :orientation "v" 
		 :space-evenly false  
		 :class "control"
(notifycenter)
(volum)
(wifi)
(pacman)))

;; End Widgets ;;
(defwidget end []
	(box :orientation "v" 
		 :space-evenly "false" 
		 :valign "end" 
		 :spacing 5
(control)
(bottom)))

;; Bar Widgets ;;
(defwidget bar []
	(box :class "eww_bar" 
		 :orientation "v" 
		 :vexpand "false" 
		 :hexpand "false"
(top)
(end)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Window Section's							 ;;	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow bar
	:geometry (geometry :x "15px"
						:y "0%"
						:anchor "left center"
						:height "86%"
						:width "47px")
						
	:reserve (struts :distance "5px"
					 :side "left")
	:wm-ignore false
	(bar))
